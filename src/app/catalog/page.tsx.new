"use client";

import { useState, useEffect } from 'react';
import Link from 'next/link';
import { useSearchParams } from 'next/navigation';
import { FiFilter, FiX, FiSearch, FiShoppingCart } from 'react-icons/fi';
import { FaCrown } from 'react-icons/fa';
import apiClient from '@/lib/apiClient';

// Интерфейс для продукта
interface Product {
  _id: string;
  name: string;
  price: number;
  images: string[];
  composition: string;
  category: string;
  stock: number;
  articleNumber: string;
  description?: string;
  slug?: string;
}

// Категории тканей
const CATEGORIES = [
  { id: "all", name: "Все категории" },
  { id: "cotton", name: "Хлопок" },
  { id: "linen", name: "Лен" },
  { id: "silk", name: "Шелк" },
  { id: "wool", name: "Шерсть" },
  { id: "knitted", name: "Трикотаж" },
  { id: "velvet", name: "Бархат" }
];

export default function Catalog() {
  const searchParams = useSearchParams();
  const searchQuery = searchParams.get('search') || '';
  const categoryParam = searchParams.get('category') || 'all';

  const [products, setProducts] = useState<Product[]>([]);
  const [filteredProducts, setFilteredProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedCategory, setSelectedCategory] = useState(categoryParam);
  const [priceRange, setPriceRange] = useState<[number, number]>([0, 3000]);
  const [inStock, setInStock] = useState(false);
  const [searchTerm, setSearchTerm] = useState(searchQuery);
  const [isFilterOpen, setIsFilterOpen] = useState(false);

  // Загрузка товаров из API
  useEffect(() => {
    const fetchProducts = async () => {
      try {
        setLoading(true);
        let apiUrl = '/products';
        
        // Если выбрана категория, добавляем её в запрос
        if (categoryParam && categoryParam !== 'all') {
          apiUrl += `?category=${categoryParam}`;
        }
        
        // Если есть поисковый запрос, добавляем его
        if (searchQuery) {
          apiUrl += `${categoryParam !== 'all' ? '&' : '?'}search=${searchQuery}`;
        }
        
        const response = await apiClient.get(apiUrl);
        
        if (response.success && response.data) {
          setProducts(response.data);
          setFilteredProducts(response.data);
        } else {
          setError('Не удалось загрузить товары');
        }
      } catch (error) {
        console.error('Ошибка при загрузке товаров:', error);
        setError('Ошибка при загрузке товаров');
      } finally {
        setLoading(false);
      }
    };
    
    fetchProducts();
  }, [categoryParam, searchQuery]);

  // Применение фильтров
  useEffect(() => {
    let filtered = [...products];

    // Фильтрация по категории
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(p => p.category === selectedCategory);
    }

    // Фильтрация по цене
    filtered = filtered.filter(p => p.price >= priceRange[0] && p.price <= priceRange[1]);

    // Фильтрация по наличию на складе
    if (inStock) {
      filtered = filtered.filter(p => p.stock > 0);
    }

    // Фильтрация по поисковому запросу
    if (searchTerm) {
      filtered = filtered.filter(p => 
        p.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        p.articleNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||
        (p.description && p.description.toLowerCase().includes(searchTerm.toLowerCase()))
      );
    }

    setFilteredProducts(filtered);
  }, [products, selectedCategory, priceRange, inStock, searchTerm]);

  // Обработчики событий
  const handleCategoryChange = (category: string) => {
    setSelectedCategory(category);
  };

  const handlePriceChange = (value: number, type: 'min' | 'max') => {
    if (type === 'min') {
      setPriceRange([value, priceRange[1]]);
    } else {
      setPriceRange([priceRange[0], value]);
    }
  };

  const handleInStockChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInStock(e.target.checked);
  };

  const handleSearchSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Поиск выполняется через useEffect
  };

  const toggleFilters = () => {
    setIsFilterOpen(!isFilterOpen);
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="page-title text-3xl font-bold mb-8">Каталог тканей</h1>

      {/* Поиск */}
      <div className="mb-8">
        <form onSubmit={handleSearchSubmit} className="flex">
          <input
            type="text"
            placeholder="Поиск по названию или артикулу..."
            className="form-input w-full md:w-1/2 p-3 rounded-l-md"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <button
            type="submit"
            className="btn px-4 rounded-r-md hover:bg-primary-hover flex items-center justify-center"
          >
            <FiSearch className="mr-2" /> Поиск
          </button>
        </form>
      </div>

      <div className="flex flex-col md:flex-row gap-8">
        {/* Фильтры - мобильная версия */}
        <button
          className="md:hidden btn px-4 py-3 flex items-center justify-center gap-2"
          onClick={toggleFilters}
        >
          {isFilterOpen ? (
            <>
              <FiX /> Скрыть фильтры
            </>
          ) : (
            <>
              <FiFilter /> Показать фильтры
            </>
          )}
        </button>

        {/* Фильтры */}
        <div
          className={`${
            isFilterOpen ? 'block' : 'hidden'
          } md:block w-full md:w-64 bg-white rounded-md p-4 shadow-sm sticky top-24 h-fit`}
        >
          <h2 className="text-xl font-semibold mb-4">Фильтры</h2>

          {/* Категории */}
          <div className="mb-6">
            <h3 className="font-medium mb-2">Категории</h3>
            <div className="space-y-2">
              {CATEGORIES.map((category) => (
                <div key={category.id} className="flex items-center">
                  <input
                    type="radio"
                    id={`category-${category.id}`}
                    name="category"
                    checked={selectedCategory === category.id}
                    onChange={() => handleCategoryChange(category.id)}
                    className="form-radio text-pink-500"
                  />
                  <label
                    htmlFor={`category-${category.id}`}
                    className="ml-2 cursor-pointer"
                  >
                    {category.name}
                  </label>
                </div>
              ))}
            </div>
          </div>

          {/* Цена */}
          <div className="mb-6">
            <h3 className="font-medium mb-2">Цена (₽)</h3>
            <div className="grid grid-cols-2 gap-2">
              <div>
                <label htmlFor="price-min" className="text-sm text-gray-600">
                  От
                </label>
                <input
                  type="number"
                  id="price-min"
                  className="form-input w-full p-2 text-sm"
                  value={priceRange[0]}
                  onChange={(e) =>
                    handlePriceChange(parseInt(e.target.value) || 0, 'min')
                  }
                  min="0"
                  max={priceRange[1]}
                />
              </div>
              <div>
                <label htmlFor="price-max" className="text-sm text-gray-600">
                  До
                </label>
                <input
                  type="number"
                  id="price-max"
                  className="form-input w-full p-2 text-sm"
                  value={priceRange[1]}
                  onChange={(e) =>
                    handlePriceChange(parseInt(e.target.value) || 0, 'max')
                  }
                  min={priceRange[0]}
                />
              </div>
            </div>
          </div>

          {/* Наличие */}
          <div className="mb-6">
            <div className="flex items-center">
              <input
                type="checkbox"
                id="in-stock"
                checked={inStock}
                onChange={handleInStockChange}
                className="form-checkbox text-pink-500"
              />
              <label htmlFor="in-stock" className="ml-2 cursor-pointer">
                Только в наличии
              </label>
            </div>
          </div>
        </div>

        {/* Товары */}
        <div className="flex-1">
          {/* Результаты поиска */}
          <div className="mb-4 flex justify-between items-center">
            <h2 className="text-lg font-medium">
              {filteredProducts.length} {filteredProducts.length === 1 ? 'товар' : 
                filteredProducts.length > 1 && filteredProducts.length < 5 ? 'товара' : 'товаров'}
            </h2>
          </div>

          {/* Сообщение об ошибке */}
          {error && (
            <div className="notification notification-error rounded-md p-4 mb-4">
              {error}
            </div>
          )}

          {/* Индикатор загрузки */}
          {loading ? (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(6)].map((_, index) => (
                <div key={index} className="animate-pulse">
                  <div className="h-64 bg-gray-200 rounded-md mb-4"></div>
                  <div className="h-5 bg-gray-200 rounded w-3/4 mb-2"></div>
                  <div className="h-4 bg-gray-200 rounded w-1/2"></div>
                </div>
              ))}
            </div>
          ) : filteredProducts.length === 0 ? (
            <div className="text-center py-12">
              <div className="text-gray-500 mb-4 text-6xl">😔</div>
              <h3 className="text-xl font-semibold mb-2">Товары не найдены</h3>
              <p className="text-gray-600 mb-4">
                Попробуйте изменить параметры фильтрации или поиска
              </p>
              <button
                onClick={() => {
                  setSelectedCategory('all');
                  setPriceRange([0, 3000]);
                  setInStock(false);
                  setSearchTerm('');
                }}
                className="btn-secondary px-4 py-2 rounded"
              >
                Сбросить все фильтры
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredProducts.map((product) => (
                <div key={product._id} className="product-card">
                  <Link href={`/product/${product.slug || product.articleNumber}`}>
                    <div className="h-64 bg-gray-200 relative">
                      {/* Декоративная корона на премиальных товарах (если цена > 1500) */}
                      {product.price > 1500 && (
                        <div className="absolute top-3 right-3 text-amber-500 text-sm">
                          <FaCrown />
                        </div>
                      )}
                    </div>
                    <div className="p-4">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-medium hover:text-pink-600 transition">{product.name}</h3>
                        <span className="text-xs text-gray-500">{product.articleNumber}</span>
                      </div>
                      <p className="text-sm text-gray-600 mb-2">{product.composition}</p>
                      <div className="flex justify-between items-center">
                        <p className="product-price">{product.price} ₽/м</p>
                        <span className={`text-sm ${product.stock > 0 ? 'text-pink-600' : 'text-red-600'}`}>
                          {product.stock > 0 ? 'В наличии' : 'Нет в наличии'}
                        </span>
                      </div>
                      <button className="w-full mt-3 btn-secondary py-1 px-2 rounded flex items-center justify-center gap-1 text-sm">
                        <FiShoppingCart size={14} /> В корзину
                      </button>
                    </div>
                  </Link>
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
