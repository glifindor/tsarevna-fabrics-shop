import { NextRequest, NextResponse } from 'next/server';
import dbConnect from '@/lib/db';
import Product from '@/models/Product';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '@/lib/auth';

export async function GET(
  req: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {    await dbConnect();
    
    const { slug } = await params;
    const productId = slug;
    
    if (!productId) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞' },
        { status: 400 }
      );
    }
    
    // –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ —Ä–∞–∑–Ω—ã–º –ø–æ–ª—è–º
    let product;
    
    console.log(`üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞: ${productId}`);
    
    try {
      // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ _id (–µ—Å–ª–∏ —ç—Ç–æ –≤–∞–ª–∏–¥–Ω—ã–π ObjectId)
      if (productId.match(/^[0-9a-fA-F]{24}$/)) {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ MongoDB ObjectId: ${productId}`);
        product = await Product.findById(productId);
        if (product) {
          console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –ø–æ ID: ${product.name} (${product.articleNumber})`);
        }
      }
      
      // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
      if (!product) {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: ${productId}`);
        product = await Product.findOne({ articleNumber: productId });
        if (product) {
          console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: ${product.name} (ID: ${product._id})`);
        }
      }
      
      // 3. –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –ø–æ slug
      if (!product) {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ slug: ${productId}`);
        product = await Product.findOne({ slug: productId });
        if (product) {
          console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –ø–æ slug: ${product.name} (ID: ${product._id})`);
        }
      }
      
      // 4. –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (—á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ)
      if (!product) {
        console.log(`üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: ${productId}`);
        product = await Product.findOne({ 
          name: { $regex: productId, $options: 'i' } 
        });
        if (product) {
          console.log(`‚úÖ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: ${product.name} (ID: ${product._id})`);
        }
      }
      
      // 5. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (!product) {
        console.log(`‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∫–∞–∑—ã–≤–∞—é –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –±–∞–∑–µ:`);
        const allProducts = await Product.find({}).limit(10);
        allProducts.forEach((p, index) => {
          console.log(`${index + 1}. ID: ${p._id}, –ê—Ä—Ç–∏–∫—É–ª: ${p.articleNumber}, –ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}`);
        });
      }
      
    } catch (findError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–∞:', findError);
    }
    
    if (!product) {
      return NextResponse.json(
        { success: false, message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    
    return NextResponse.json({ success: true, data: product });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ:', error);
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ', error },
      { status: 500 }
    );
  }
}

export async function PUT(
  req: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–æ–ª—å
    const session = await getServerSession(authOptions);
    
    if (!session || session.user.role !== 'admin') {
      return NextResponse.json(
        { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
        { status: 403 }
      );
    }
      await dbConnect();
    
    const { slug } = await params;
    const productId = slug;
    const body = await req.json();
    
    if (!productId) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞' },
        { status: 400 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
    const product = await Product.findById(productId);
    
    if (!product) {
      return NextResponse.json(
        { success: false, message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –∞—Ä—Ç–∏–∫—É–ª –¥—Ä—É–≥–∏–º —Ç–æ–≤–∞—Ä–æ–º
    if (body.articleNumber && body.articleNumber !== product.articleNumber) {
      const existingProduct = await Product.findOne({ 
        articleNumber: body.articleNumber,
        _id: { $ne: productId }
      });
      
      if (existingProduct) {
        return NextResponse.json(
          { success: false, message: '–¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' },
          { status: 400 }
        );
      }
    }    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä
    try {
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è - —Å—Ç—Ä–æ–∫–∞
      if (body.category) {
        body.category = String(body.category).trim();
      }
      
      console.log('Updating product. ID:', productId, 'Data:', body);
      
      const updatedProduct = await Product.findByIdAndUpdate(
        productId,
        { $set: body },
        { new: true, runValidators: true }
      );
      
      console.log('Product updated successfully:', updatedProduct);
      
      return NextResponse.json({
        success: true,
        message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω',
        data: updatedProduct
      });
    } catch (error) {
      console.error('Error updating product:', error);
      return NextResponse.json(
        { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', error },
        { status: 500 }
      );
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', error },
      { status: 500 }
    );
  }
}

export async function DELETE(
  req: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ —Ä–æ–ª—å
    const session = await getServerSession(authOptions);
    
    if (!session || session.user.role !== 'admin') {
      return NextResponse.json(
        { success: false, message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏' },
        { status: 403 }
      );    }
    
    await dbConnect();
    
    const { slug } = await params;
    const productId = slug;
    
    if (!productId) {
      return NextResponse.json(
        { success: false, message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–æ–≤–∞—Ä–∞' },
        { status: 400 }
      );
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–æ–≤–∞—Ä
    const product = await Product.findById(productId);
    
    if (!product) {
      return NextResponse.json(
        { success: false, message: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 404 }
      );
    }
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä
    await Product.findByIdAndDelete(productId);
    
    return NextResponse.json({
      success: true,
      message: '–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω'
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞:', error);
    return NextResponse.json(
      { success: false, message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞', error },
      { status: 500 }
    );
  }
}
