"use client";

import { useState, useEffect } from 'react';
import Image from 'next/image';
import Link from 'next/link';
import { useParams, useRouter } from 'next/navigation';
import { FiMinus, FiPlus, FiShoppingCart, FiHeart, FiArrowLeft } from 'react-icons/fi';
import { FaCrown } from 'react-icons/fa';
import { useCart } from '@/context/CartContext';
import apiClient from '@/lib/apiClient';

export default function ProductPage() {
  const params = useParams();
  const router = useRouter();
  const slug = params.slug as string;
  
  const [product, setProduct] = useState<any>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [quantity, setQuantity] = useState(1);
  const [selectedImage, setSelectedImage] = useState(0);
  const [isAddedToCart, setIsAddedToCart] = useState(false);
  const [isFavorite, setIsFavorite] = useState(false);
  const { addItem, error: cartError } = useCart();

  // Получение данных о товаре
  useEffect(() => {
    const fetchProduct = async () => {
      setIsLoading(true);
      setError(null);

      try {
        // Всегда обращаемся к API для поиска по slug или articleNumber
        const response = await apiClient.get(`/products/${slug}`);
        if (response.success && response.data) {
          setProduct(response.data);
        } else {
          // Если не найдено по ID/slug, пробуем поиск по артикулу
          const searchResponse = await apiClient.get(`/products?search=${slug}`);
          if (searchResponse.success && searchResponse.data && searchResponse.data.length > 0) {
            setProduct(searchResponse.data[0]);
          } else {
            setError('Товар не найден');
          }
        }
      } catch (err) {
        console.error('Ошибка при получении данных о товаре:', err);
        setError('Ошибка при загрузке товара');
      } finally {
        setIsLoading(false);
      }
    };

    fetchProduct();
  }, [slug]);

  const decreaseQuantity = () => {
    if (quantity > 1) {
      setQuantity(quantity - 1);
    }
  };

  const increaseQuantity = () => {
    if (product && quantity < product.stock) {
      setQuantity(quantity + 1);
    }
  };

  const addToCart = async () => {
    if (!product) return;
    
    try {
      // Вызываем функцию из контекста корзины для добавления товара
      console.log('Добавление товара в корзину:', { 
        id: product._id || product.id, 
        name: product.name, 
        articleNumber: product.articleNumber,
        quantity 
      });
      
      // Предпочтительно используем артикул товара для поиска в БД
      let productIdentifier;
      
      if (product.articleNumber) {
        // Если есть артикул, используем его (наиболее надежный вариант)
        productIdentifier = product.articleNumber;
      } else if (product._id) {
        // Если есть MongoDB ID, используем его
        productIdentifier = product._id;
      } else {
        // Если ничего нет, используем числовой id из демо-данных
        productIdentifier = product.id.toString();
      }
      
      console.log('Идентификатор товара для добавления в корзину:', productIdentifier);
      await addItem(productIdentifier, quantity);
      
      console.log(`Добавлено в корзину: ${product.name}, количество: ${quantity}`);
      setIsAddedToCart(true);
      
      // Сбросить сообщение через 3 секунды
      setTimeout(() => {
        setIsAddedToCart(false);
      }, 3000);
    } catch (error) {
      console.error('Ошибка при добавлении товара в корзину:', error);
      // Можно добавить показ сообщения об ошибке
    }
  };

  const toggleFavorite = () => {
    setIsFavorite(!isFavorite);
  };

  // Показываем индикатор загрузки
  if (isLoading) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <div className="inline-block animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-pink-500"></div>
        <p className="mt-4 text-lg">Загрузка информации о товаре...</p>
      </div>
    );
  }

  // Показываем сообщение об ошибке
  if (error || !product) {
    return (
      <div className="container mx-auto px-4 py-16 text-center">
        <h1 className="page-title text-2xl font-bold mb-4">Товар не найден</h1>
        <p className="mb-8">К сожалению, запрашиваемый товар не существует или был удален.</p>
        <Link 
          href="/catalog" 
          className="btn px-6 py-3 rounded-full font-medium"
        >
          <FiArrowLeft className="inline mr-2" />
          Вернуться в каталог
        </Link>
      </div>
    );
  }

  // Определяем, является ли товар премиальным (цена > 1500)
  const isPremium = product.price > 1500;

  return (
    <div className="container mx-auto px-4 py-8">
      {/* Хлебные крошки */}
      <nav className="text-sm mb-8">
        <ol className="flex flex-wrap items-center">
          <li className="flex items-center">
            <Link href="/" className="text-gray-500 hover:text-pink-500 transition">
              Главная
            </Link>
            <span className="mx-2 text-gray-400">/</span>
          </li>
          <li className="flex items-center">
            <Link href="/catalog" className="text-gray-500 hover:text-pink-500 transition">
              Каталог
            </Link>
            <span className="mx-2 text-gray-400">/</span>
          </li>
          <li className="flex items-center">
            <Link 
              href={`/catalog?category=${product.category}`} 
              className="text-gray-500 hover:text-pink-500 transition"
            >
              {product.categoryName || product.category}
            </Link>
            <span className="mx-2 text-gray-400">/</span>
          </li>
          <li className="text-pink-500 font-medium truncate">{product.name}</li>
        </ol>
      </nav>

      <div className="flex flex-col md:flex-row -mx-4">
        {/* Галерея изображений */}
        <div className="md:w-1/2 px-4 mb-8 md:mb-0">
          <div className="mb-4 bg-gray-100 rounded-lg overflow-hidden relative aspect-square">
            <div className="absolute inset-0 bg-gray-200"></div>
            
            {/* Бейдж премиальности */}
            {isPremium && (
              <div className="absolute top-4 right-4 bg-amber-100 text-amber-700 px-3 py-1 rounded-full flex items-center">
                <FaCrown className="text-amber-500 mr-1" size={14} />
                <span className="text-xs font-medium">Премиум</span>
              </div>
            )}
          </div>
          <div className="grid grid-cols-4 gap-2">
            {product.images && product.images.map((image: string, index: number) => (
              <button
                key={index}
                className={`aspect-square bg-gray-100 rounded-md overflow-hidden relative ${
                  selectedImage === index ? 'ring-2 ring-pink-500' : ''
                }`}
                onClick={() => setSelectedImage(index)}
              >
                <div className="absolute inset-0 bg-gray-200"></div>
              </button>
            ))}
          </div>
        </div>

        {/* Информация о товаре */}
        <div className="md:w-1/2 px-4">
          <div className="flex justify-between items-start">
            <h1 className="text-3xl font-bold mb-2" style={{ fontFamily: 'var(--font-title)' }}>{product.name}</h1>
            <button 
              onClick={toggleFavorite} 
              className={`p-2 rounded-full ${isFavorite ? 'text-pink-500' : 'text-gray-400 hover:text-pink-500'}`}
              aria-label={isFavorite ? "Удалить из избранного" : "Добавить в избранное"}
            >
              <FiHeart size={22} className={isFavorite ? 'fill-current' : ''} />
            </button>
          </div>
          <p className="text-gray-500 mb-4">Артикул: {product.articleNumber}</p>
          
          <div className="text-2xl font-bold text-pink-600 mb-6">
            {product.price} ₽/м
          </div>

          <div className="mb-6 decorated-container p-4">
            <h2 className="font-semibold mb-2 text-pink-600">Описание</h2>
            <p className="text-gray-700">{product.description}</p>
          </div>

          <div className="mb-6">
            <h2 className="font-semibold mb-3 text-pink-600">Характеристики</h2>
            <ul className="space-y-2 divide-y divide-pink-100">
              <li className="flex pt-2">
                <span className="w-32 text-gray-600">Состав:</span>
                <span className="text-gray-900">{product.composition}</span>
              </li>
              <li className="flex pt-2">
                <span className="w-32 text-gray-600">Категория:</span>
                <span className="text-gray-900">{product.categoryName || product.category}</span>
              </li>
              <li className="flex pt-2">
                <span className="w-32 text-gray-600">Наличие:</span>
                <span className={`${product.stock > 0 ? 'text-pink-600' : 'text-red-600'}`}>
                  {product.stock > 0 ? `${product.stock} м в наличии` : 'Нет в наличии'}
                </span>
              </li>
            </ul>
          </div>

          {/* Количество и кнопка добавления в корзину */}
          <div className="mb-8">
            <div className="flex items-center mb-4">
              <div className="mr-4">
                <span className="text-gray-600 mb-2 block">Количество (м):</span>
                <div className="flex border border-gray-300 rounded-md overflow-hidden">
                  <button 
                    onClick={decreaseQuantity}
                    className="px-3 py-2 bg-gray-100 hover:bg-gray-200 transition"
                    disabled={quantity <= 1}
                  >
                    <FiMinus />
                  </button>
                  <input 
                    type="number" 
                    value={quantity} 
                    min="1" 
                    max={product.stock} 
                    onChange={(e) => setQuantity(Math.min(product.stock, Math.max(1, parseInt(e.target.value))))}
                    className="w-16 text-center border-none focus:outline-none py-2"
                  />
                  <button 
                    onClick={increaseQuantity}
                    className="px-3 py-2 bg-gray-100 hover:bg-gray-200 transition"
                    disabled={quantity >= product.stock}
                  >
                    <FiPlus />
                  </button>
                </div>
              </div>
              <div>
                <span className="text-gray-600 mb-2 block">Итого:</span>
                <span className="text-xl font-bold text-pink-600">
                  {(product.price * quantity).toLocaleString()} ₽
                </span>
              </div>
            </div>
            
            <button 
              onClick={addToCart}
              disabled={product.stock <= 0 || isAddedToCart}
              className={`btn w-full py-3 rounded-md flex items-center justify-center transition ${
                product.stock <= 0 ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              <FiShoppingCart className="mr-2" size={18} />
              {isAddedToCart ? 'Добавлено в корзину!' : 'Добавить в корзину'}
            </button>
            
            {cartError && (
              <p className="text-red-500 mt-2 text-sm">{cartError}</p>
            )}
          </div>

          {/* Дополнительная информация */}
          <div className="bg-pink-50 p-4 rounded-md text-sm">
            <p className="flex items-center text-pink-800">
              <span className="font-semibold">Доставка:</span>
              <span className="ml-2">1-3 рабочих дня</span>
            </p>
            <p className="flex items-center text-pink-800 mt-2">
              <span className="font-semibold">Оплата:</span>
              <span className="ml-2">Картой онлайн, при получении</span>
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}
